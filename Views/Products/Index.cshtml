
@model IEnumerable<JDshop.Models.Product>
@using JDshop.Models

@{
    ViewData["Title"] = "Shop";
    var categories = ViewBag.Category as List<Category>;
}

<style>
    /* Light Theme Variables */
    :root {
        --bg-primary: #ffffff;
        --bg-secondary: #f8fafc;
        --bg-card: #ffffff;
        --text-primary: #1f2937;
        --text-secondary: #6b7280;
        --text-muted: #9ca3af;
        --accent-blue: #3b82f6;
        --accent-blue-hover: #2563eb;
        --border-color: #e5e7eb;
        --border-light: #f3f4f6;
        --success-color: #10b981;
        --danger-color: #ef4444;
        --shadow-sm: 0 1px 2px 0 rgba(0, 0, 0, 0.05);
        --shadow-md: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
        --shadow-lg: 0 10px 15px -3px rgba(0, 0, 0, 0.1);
    }

    /* Global Light Theme */
    body {
        background: var(--bg-primary);
        color: var(--text-primary);
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }

    /* Breadcrumb */
    .breadcrumb-section {
        background: var(--bg-secondary);
        padding: 20px 0;
        border-bottom: 1px solid var(--border-color);
    }

    .breadcrumb-container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 0 20px;
        display: flex;
        align-items: center;
        gap: 10px;
    }

    .breadcrumb-link {
        color: var(--accent-blue);
        text-decoration: none;
        transition: color 0.3s;
    }

    .breadcrumb-link:hover {
        color: var(--accent-blue-hover);
        text-decoration: none;
    }

    .breadcrumb-separator {
        color: var(--text-secondary);
        margin: 0 5px;
    }

    .breadcrumb-current {
        color: var(--text-primary);
    }

    /* Main Container */
    .shop-container {
        margin: 0 auto;
        padding: 30px 20px;
        display: grid;
        grid-template-columns: 280px 1fr;
        gap: 30px;
    }

    /* Sidebar */
    .shop-sidebar {
        background: var(--bg-card);
        border-radius: 12px;
        padding: 25px;
        height: fit-content;
        border: 1px solid var(--border-color);
        box-shadow: var(--shadow-sm);
    }

    .sidebar-title {
        font-size: 1.2rem;
        font-weight: 600;
        color: var(--text-primary);
        margin-bottom: 20px;
        display: flex;
        align-items: center;
        gap: 8px;
    }

    /* Search */
    .search-section {
        margin-bottom: 25px;
    }

    .search-input {
        width: 100%;
        padding: 12px 15px;
        background: var(--bg-primary);
        border: 1px solid var(--border-color);
        border-radius: 8px;
        color: var(--text-primary);
        font-size: 14px;
        transition: border-color 0.3s;
    }

    .search-input:focus {
        outline: none;
        border-color: var(--accent-blue);
        box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
    }

    .search-input::placeholder {
        color: var(--text-muted);
    }

    /* Filter Sections */
    .filter-section {
        margin-bottom: 25px;
        padding-bottom: 20px;
        border-bottom: 1px solid var(--border-color);
    }

    .filter-section:last-child {
        border-bottom: none;
        margin-bottom: 0;
    }

    .filter-title {
        font-size: 1rem;
        font-weight: 600;
        color: var(--text-primary);
        margin-bottom: 15px;
    }

    /* Price Range */
    .price-range {
        margin-bottom: 15px;
    }

    .price-inputs {
        display: flex;
        gap: 10px;
        margin-bottom: 15px;
    }

    .price-input {
        flex: 1;
        padding: 8px 12px;
        background: var(--bg-card);
        border: 1px solid var(--border-color);
        border-radius: 6px;
        color: var(--text-primary);
        font-size: 14px;
        width: 50px;
    }

    .price-input:focus {
        outline: none;
        border-color: var(--accent-blue);
    }

    .price-slider {
        width: 100%;
        height: 6px;
        background: var(--border-color);
        border-radius: 3px;
        outline: none;
        margin-bottom: 10px;
    }

    .price-slider::-webkit-slider-thumb {
        appearance: none;
        width: 18px;
        height: 18px;
        background: var(--accent-blue);
        border-radius: 50%;
        cursor: pointer;
    }

    .price-display {
        display: flex;
        justify-content: space-between;
        font-size: 12px;
        color: var(--text-secondary);
    }

    /* Categories */
    .category-list {
        list-style: none;
        padding: 0;
        margin: 0;
    }

    .category-item {
        margin-bottom: 10px;
    }

    .category-checkbox {
        display: flex;
        align-items: center;
        gap: 10px;
        cursor: pointer;
        padding: 8px 0;
        transition: color 0.3s;
    }

    .category-checkbox:hover {
        color: var(--accent-blue);
    }

    .category-checkbox input[type="checkbox"] {
        width: 16px;
        height: 16px;
        accent-color: var(--accent-blue);
    }

    .category-link {
        color: var(--text-primary);
        text-decoration: none;
        transition: color 0.3s;
    }

    .category-link:hover {
        color: var(--accent-blue);
        text-decoration: none;
    }

    /* Colors */
    .color-grid {
        display: grid;
        grid-template-columns: repeat(5, 1fr);
        gap: 8px;
    }

    .color-option {
        width: 32px;
        height: 32px;
        border-radius: 50%;
        border: 2px solid var(--border-color);
        cursor: pointer;
        transition: all 0.3s;
        position: relative;
    }

    .color-option:hover {
        transform: scale(1.1);
        border-color: var(--accent-blue);
    }

    .color-option input[type="radio"] {
        display: none;
    }

    .color-option input[type="radio"]:checked + .color-option {
        border-color: var(--accent-blue);
        box-shadow: 0 0 0 2px var(--accent-blue);
    }

    /* Sizes */
    .size-grid {
        display: grid;
        grid-template-columns: repeat(3, 1fr);
        gap: 8px;
        margin-bottom: 15px;
    }

    .size-option {
        padding: 8px 12px;
        background: var(--bg-card);
        border: 1px solid var(--border-color);
        border-radius: 6px;
        text-align: center;
        cursor: pointer;
        transition: all 0.3s;
        color: var(--text-primary);
        font-size: 14px;
    }

    .size-option:hover {
        border-color: var(--accent-blue);
        background: rgba(59, 130, 246, 0.1);
    }

    .size-option.active {
        background: var(--accent-blue);
        border-color: var(--accent-blue);
        color: white;
    }

    .size-option input[type="radio"] {
        display: none;
    }

    /* Clear Filters Button */
    .clear-filters {
        width: 100%;
        padding: 12px;
        background: transparent;
        border: 1px solid var(--border-color);
        border-radius: 8px;
        color: var(--text-primary);
        cursor: pointer;
        transition: all 0.3s;
        margin-top: 20px;
    }

    .clear-filters:hover {
        border-color: var(--danger-color);
        color: var(--danger-color);
    }

    /* Main Content */
    .shop-content {
        background: var(--bg-card);
        border-radius: 12px;
        padding: 25px;
        border: 1px solid var(--border-color);
        box-shadow: var(--shadow-sm);
    }

    /* Content Header */
    .content-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 25px;
        padding-bottom: 20px;
        border-bottom: 1px solid var(--border-color);
    }

    .results-info {
        color: var(--text-secondary);
        font-size: 14px;
    }

    .view-options {
        display: flex;
        gap: 10px;
    }

    .view-btn {
        width: 40px;
        height: 40px;
        background: var(--bg-card);
        border: 1px solid var(--border-color);
        border-radius: 6px;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        transition: all 0.3s;
        color: var(--text-primary);
    }

    .view-btn:hover,
    .view-btn.active {
        background: var(--accent-blue);
        border-color: var(--accent-blue);
        color: white;
    }

    /* Product Grid - Make products smaller */
    .product-grid {
        /* display: grid; */
        /* grid-template-columns: repeat(auto-fit, minmax(220px, 1fr)); */
        /* gap: 20px; */
        /* margin-bottom: 30px; */

        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
        gap: 24px;
    }

    .product-grid.list-view {
        grid-template-columns: 1fr;
    }

    .product-card {
        background: var(--bg-card);
        border-radius: 8px;
        overflow: hidden;
        border: 1px solid var(--border-color);
        transition: all 0.3s;
        box-shadow: var(--shadow-sm);
    }

    .product-card.list-view {
        display: grid;
        grid-template-columns: 200px 1fr;
        gap: 20px;
        align-items: center;
    }

    .product-image {
        position: relative;
        height: 200px;
        background: #f3f4f6;
        overflow: hidden;
    }

        .product-image img {
            width: 100%;
            height: 100%;
            object-fit: cover;
            transition: transform 0.3s ease;
        }

    .product-card.list-view .product-image {
        height: 150px;
    }

    .product-info {
        padding: 15px;
    }

    .product-card.list-view .product-info {
        padding: 20px;
        @* display: grid; *@
        grid-template-columns: 1fr auto;
        gap: 20px;
        align-items: center;
    }

    .product-title {
        font-size: 1rem;
        font-weight: 600;
        color: var(--text-primary);
        margin-bottom: 8px;
        line-height: 1.4;
    }

    .product-badge {
        position: absolute;
        top: 12px;
        left: 12px;
        background: var(--danger-color);
        color: white;
        padding: 4px 8px;
        border-radius: 4px;
        font-size: 12px;
        font-weight: 600;
    }

    .product-badge.new {
        background: var(--success-color);
    }

    .product-actions {
        position: absolute;
        top: 12px;
        right: 12px;
        display: flex;
        flex-direction: column;
        gap: 8px;
        opacity: 0;
        transition: opacity 0.3s;
    }

    .product-card:hover .product-actions {
        opacity: 1;
    }

    .action-btn {
        width: 36px;
        height: 36px;
        background: rgba(255, 255, 255, 0.9);
        border: none;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        transition: all 0.3s;
        color: var(--text-primary);
    }

    .action-btn:hover {
        background: var(--accent-blue);
        color: white;
    }

    .product-info {
        padding: 20px;
    }

    .product-category {
        color: var(--text-secondary);
        font-size: 12px;
        text-transform: uppercase;
        letter-spacing: 0.5px;
        margin-bottom: 8px;
    }

    .product-title {
        font-size: 1.1rem;
        font-weight: 600;
        color: var(--text-primary);
        margin-bottom: 10px;
        line-height: 1.4;
    }

    .product-rating {
        display: flex;
        align-items: center;
        gap: 5px;
        margin-bottom: 12px;
    }

    .stars {
        display: flex;
        gap: 2px;
    }

    .star {
        color: #fbbf24;
        font-size: 14px;
    }

    .rating-text {
        color: var(--text-secondary);
        font-size: 12px;
        margin-left: 5px;
    }

    .product-price {
        display: flex;
        align-items: center;
        gap: 10px;
        margin-bottom: 15px;
    }

    .current-price {
        font-size: 1.2rem;
        font-weight: 700;
        color: var(--accent-blue);
    }

    .original-price {
        font-size: 1rem;
        color: var(--text-secondary);
        text-decoration: line-through;
    }

    .add-to-cart {
        width: 100%;
        padding: 12px;
        background: var(--accent-blue);
        color: white;
        border: none;
        border-radius: 8px;
        font-weight: 600;
        cursor: pointer;
        transition: background 0.3s;
        text-decoration: none;
        display: block;
        text-align: center;
    }

    .add-to-cart:hover {
        background: var(--accent-blue-hover);
        color: white;
        text-decoration: none;
    }

    /* Pagination */
    .pagination {
        display: flex;
        justify-content: center;
        align-items: center;
        gap: 10px;
        margin-top: 30px;
    }

    .pagination-btn {
        padding: 10px 15px;
        background: var(--bg-card);
        border: 1px solid var(--border-color);
        border-radius: 6px;
        color: var(--text-primary);
        text-decoration: none;
        transition: all 0.3s;
        min-width: 44px;
        text-align: center;
    }

    .pagination-btn:hover {
        background: var(--accent-blue);
        border-color: var(--accent-blue);
        color: white;
        text-decoration: none;
    }

    .pagination-btn.active {
        background: var(--accent-blue);
        border-color: var(--accent-blue);
        color: white;
    }

    .pagination-btn.disabled {
        opacity: 0.5;
        cursor: not-allowed;
    }

    .pagination-btn.disabled:hover {
        background: var(--bg-card);
        border-color: var(--border-color);
        color: var(--text-primary);
    }


</style>

<!-- Breadcrumb Section -->
<div class="breadcrumb-section">
    <div class="breadcrumb-container">
        <a href="@Url.Action("Index", "Home")" class="breadcrumb-link">Trang chủ</a>
        <span class="breadcrumb-separator">/</span>
        <span class="breadcrumb-current">Sản phẩm</span>
    </div>
</div>

<!-- Shop Section -->
<div class="shop-container">
    <!-- Sidebar -->
    <div class="shop-sidebar">
        <div class="sidebar-title">
            <i class="fas fa-filter"></i>
            Bộ lọc
        </div>

        <!-- Search -->
        <div class="search-section">
            <form action="@Url.Action("Index", "Products")" method="get">
                <input type="text" name="search" class="search-input" placeholder="Tìm kiếm sản phẩm..." value="@Context.Request.Query["search"]">
                @if (!string.IsNullOrEmpty(Context.Request.Query["size"]))
                {
                    <input type="hidden" name="size" value="@Context.Request.Query["size"]" />
                }
                @if (!string.IsNullOrEmpty(Context.Request.Query["color"]))
                {
                    <input type="hidden" name="color" value="@Context.Request.Query["color"]" />
                }
                @if (!string.IsNullOrEmpty(Context.Request.Query["category"]))
                {
                    <input type="hidden" name="category" value="@Context.Request.Query["category"]" />
                }
                @if (!string.IsNullOrEmpty(Context.Request.Query["minPrice"]))
                {
                    <input type="hidden" name="minPrice" value="@Context.Request.Query["minPrice"]" />
                }
                @if (!string.IsNullOrEmpty(Context.Request.Query["maxPrice"]))
                {
                    <input type="hidden" name="maxPrice" value="@Context.Request.Query["maxPrice"]" />
                }
            </form>
        </div>

        <!-- Price Range -->
        <div class="filter-section">
            <div class="filter-title">Khoảng giá</div>
            <form action="@Url.Action("Index", "Products")" method="get">
                <div class="price-inputs">
                    <input type="number" name="minPrice" class="price-input" placeholder="0đ" value="@Context.Request.Query["minPrice"]">
                    <input type="number" name="maxPrice" class="price-input" placeholder="500,000đ" value="@Context.Request.Query["maxPrice"]">
                </div>
                <input type="range" class="price-slider" min="0" max="500000" value="@(Context.Request.Query["maxPrice"].ToString() ?? "500000")">
                <div class="price-display">
                    <span>0đ</span>
                    <span>500,000đ</span>
                </div>
                <button type="submit" class="add-to-cart" style="margin-top: 10px;">Áp dụng</button>
            </form>
        </div>

        <!-- Categories -->
        <div class="filter-section">
            <div class="filter-title">Danh mục</div>
            <ul class="category-list">
                @foreach (var category in categories)
                {
                    var productCount = category.ProductTypes
                        .SelectMany(pt => pt.Products)
                        .SelectMany(p => p.ProductSizeColors)
                        .Select(psc => psc.ProductId)
                        .Distinct()
                        .Count();

                    <li class="category-item">
                        <label class="category-checkbox">
                            <input type="checkbox" name="category" value="@category.Name">
                            <a href="@Url.Action("Index", "Products", new { category = category.Name })" class="category-link">
                                @category.Name (@productCount)
                            </a>
                        </label>
                    </li>
                }
            </ul>
        </div>

        <!-- Colors -->
        <div class="filter-section">
            <div class="filter-title">Màu sắc</div>
            <form action="@Url.Action("Index", "Products")" method="get">
                <div class="color-grid">
                    <label class="color-option" style="background-color: #4CAF50;" title="Xanh lá">
                        <input type="radio" name="color" value="Xanh lá" onchange="this.form.submit()">
                    </label>
                    <label class="color-option" style="background-color: #FFFFFF; border-color: #ccc;" title="Trắng">
                        <input type="radio" name="color" value="Trắng" onchange="this.form.submit()">
                    </label>
                    <label class="color-option" style="background-color: #000000;" title="Đen">
                        <input type="radio" name="color" value="Đen" onchange="this.form.submit()">
                    </label>
                    <label class="color-option" style="background-color: #F44336;" title="Đỏ">
                        <input type="radio" name="color" value="Đỏ" onchange="this.form.submit()">
                    </label>
                    <label class="color-option" style="background-color: #F5F5DC;" title="Be">
                        <input type="radio" name="color" value="Be" onchange="this.form.submit()">
                    </label>
                    <label class="color-option" style="background-color: #FFEB3B;" title="Vàng">
                        <input type="radio" name="color" value="Vàng" onchange="this.form.submit()">
                    </label>
                    <label class="color-option" style="background-color: #808080;" title="Xám">
                        <input type="radio" name="color" value="Xám" onchange="this.form.submit()">
                    </label>
                    <label class="color-option" style="background-color: #8B4513;" title="Nâu">
                        <input type="radio" name="color" value="Nâu" onchange="this.form.submit()">
                    </label>
                    <label class="color-option" style="background-color: #2196F3;" title="Xanh dương">
                        <input type="radio" name="color" value="Xanh dương" onchange="this.form.submit()">
                    </label>
                    <label class="color-option" style="background-color: #00008B;" title="Xanh đen">
                        <input type="radio" name="color" value="Xanh đen" onchange="this.form.submit()">
                    </label>
                </div>
            </form>
        </div>

        <!-- Sizes -->
        <div class="filter-section">
            <div class="filter-title">Kích cỡ</div>
            <form action="@Url.Action("Index", "Products")" method="get">
                <div class="size-grid">
                    @foreach (var size in ViewBag.Sizes)
                    {
                        <label class="size-option @(Context.Request.Query["size"] == size.Size1 ? "active" : "")">
                            @size.Size1
                            <input type="radio" name="size" value="@size.Size1" onchange="this.form.submit()" @(Context.Request.Query["size"] == size.Size1 ? "checked" : "")>
                        </label>
                    }
                </div>
                <label class="category-checkbox">
                    <input type="checkbox" name="oversize" value="true">
                    Oversize
                </label>
            </form>
        </div>

        <!-- Clear Filters -->
        <button class="clear-filters" onclick="window.location.href='@Url.Action("Index", "Products")'">
            <i class="fas fa-times"></i>
            Xóa bộ lọc
        </button>
    </div>

    <!-- Main Content -->
    <div class="shop-content">
        <!-- Content Header -->
        <div class="content-header">
            <div class="results-info">
                Hiển thị @((ViewBag.CurrentPage - 1) * 12 + 1)–@Math.Min(ViewBag.CurrentPage * 12, Model.Count()) của @Model.Count() sản phẩm
            </div>
            <div style="display: flex; align-items: center; gap: 15px;">
                <div class="sort-dropdown">
                    <select class="sort-select" onchange="handleSortChange(this.value)">
                        <option value="newest">Mới nhất</option>
                        <option value="asc">Giá thấp đến cao</option>
                        <option value="desc">Giá cao đến thấp</option>
                        <option value="rating">Đánh giá cao nhất</option>
                        <option value="popular">Phổ biến nhất</option>
                    </select>
                </div>
                <div class="view-options">
                    <button class="view-btn active" onclick="toggleView('grid')" title="Grid View">
                        <i class="fas fa-th"></i>
                    </button>
                    <button class="view-btn" onclick="toggleView('list')" title="List View">
                        <i class="fas fa-list"></i>
                    </button>
                </div>
            </div>
        </div>

        <!-- Product Grid -->
        <div class="product-grid">
            @foreach (var product in Model)
            {
                <div class="product-card">
                    <div class="product-image">
                        <a asp-action="Details" asp-route-id="@product.Id">
                        @if (product.Images != null && product.Images.Any())
                        {
                            <img src="/contents/Images/Product/@product.Images.FirstOrDefault()?.Url" alt="@product.Name">
                        }
                        else
                        {
                            <div style="display: flex; align-items: center; justify-content: center; height: 100%; background: #f3f4f6;">
                                <i class="fas fa-image" style="font-size: 3rem; color: #9ca3af;"></i>
                            </div>
                        }
                        </a>
                        <div class="product-badge">-25%</div>
                        
                        <div class="product-actions">
                            <button class="action-btn" title="Yêu thích">
                                <i class="far fa-heart"></i>
                            </button>
                            <button class="action-btn" title="So sánh">
                                <i class="fas fa-exchange-alt"></i>
                            </button>
                            <button class="action-btn" title="Xem nhanh">
                                <i class="fas fa-eye"></i>
                            </button>
                        </div>
                    </div>
                    
                    <div class="product-info">
                        <div class="product-category">@product.ProductType.Name</div>
                        <h3 class="product-title">@product.Name</h3>
                        
                        <div class="product-rating">
                            <div class="stars">
                                <i class="fas fa-star star"></i>
                                <i class="fas fa-star star"></i>
                                <i class="fas fa-star star"></i>
                                <i class="fas fa-star star"></i>
                                <i class="far fa-star star"></i>
                            </div>
                            <span class="rating-text">4.5 (24 đánh giá)</span>
                        </div>
                        
                        <div class="product-price">
                            <span class="current-price">@string.Format("{0:N0}đ", @product.Price)</span>
                            <span class="original-price">@string.Format("{0:N0}đ", @product.Price * 1.33)</span>
                        </div>
                        
                        <a href="#" data-id="@product.Id" class="add-to-cart">
                            <i class="fas fa-shopping-cart"></i>
                            Thêm vào giỏ
                        </a>
                    </div>
                </div>
            }
        </div>

        <!-- Pagination -->
        <div class="pagination">
            <a href="#" class="pagination-btn disabled">Trước</a>
            
            @for (int i = 1; i <= ViewBag.TotalPages; i++)
            {
                <a class="pagination-btn @(i == ViewBag.CurrentPage ? "active" : "")"
                   href="@Url.Action("Index", new {
                        pageNumber = i,
                        size = Context.Request.Query["size"],
                        color = Context.Request.Query["color"],
                        minPrice = Context.Request.Query["minPrice"],
                        maxPrice = Context.Request.Query["maxPrice"],
                        search = Context.Request.Query["search"],
                        category = Context.Request.Query["category"]
                   })">@i</a>
            }
            
            <a href="#" class="pagination-btn">Sau</a>
        </div>
    </div>
</div>

<script>
    // View toggle functionality
    function toggleView(viewType) {
        const gridBtn = document.querySelector('.view-btn[title="Grid View"]');
        const listBtn = document.querySelector('.view-btn[title="List View"]');
        const productGrid = document.querySelector('.product-grid');
        const productCards = document.querySelectorAll('.product-card');
        
        // Update button states
        document.querySelectorAll('.view-btn').forEach(b => b.classList.remove('active'));
        
        if (viewType === 'list') {
            listBtn.classList.add('active');
            productGrid.classList.add('list-view');
            productCards.forEach(card => card.classList.add('list-view'));
        } else {
            gridBtn.classList.add('active');
            productGrid.classList.remove('list-view');
            productCards.forEach(card => card.classList.remove('list-view'));
        }
    }

    // Sort functionality
    function handleSortChange(sortValue) {
        const currentUrl = new URL(window.location);
        currentUrl.searchParams.set('sort', sortValue);
        currentUrl.searchParams.set('pageNumber', '1'); // Reset to first page
        window.location.href = currentUrl.toString();
    }

    // Price slider functionality
    const priceSlider = document.querySelector('.price-slider');
    const maxPriceInput = document.querySelector('input[name="maxPrice"]');
    
    if (priceSlider && maxPriceInput) {
        priceSlider.addEventListener('input', function() {
            maxPriceInput.value = this.value;
        });
    }

    // Add to cart functionality
    document.querySelectorAll('.add-to-cart').forEach(btn => {
        btn.addEventListener('click', function(e) {
            if (this.hasAttribute('data-id')) {
                e.preventDefault();
                const productId = this.getAttribute('data-id');
                console.log('Added product to cart:', productId);
                
                // Add loading state
                const originalText = this.innerHTML;
                this.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Đang thêm...';
                this.style.pointerEvents = 'none';
                
                // Simulate API call
                setTimeout(() => {
                    this.innerHTML = '<i class="fas fa-check"></i> Đã thêm';
                    setTimeout(() => {
                        this.innerHTML = originalText;
                        this.style.pointerEvents = 'auto';
                    }, 1000);
                }, 500);
                
                // Update cart count if function exists
                if (typeof updateCartCount === 'function') {
                    updateCartCount();
                }
            }
        });
    });

    // Search form auto-submit on Enter
    document.querySelector('.search-input').addEventListener('keypress', function(e) {
        if (e.key === 'Enter') {
            this.closest('form').submit();
        }
    });

    // Initialize sort dropdown with current value
    document.addEventListener('DOMContentLoaded', function() {
        const urlParams = new URLSearchParams(window.location.search);
        const currentSort = urlParams.get('sort') || 'newest';
        const sortSelect = document.querySelector('.sort-select');
        if (sortSelect) {
            sortSelect.value = currentSort;
        }
    });
</script>
